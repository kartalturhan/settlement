


//divide  column and rows
int w = 20; //column row size
int columns, rows;

//board to paint
int[][] board;
int[][] elevation;

// populasyon sayısı giriniz
int p=50;
//modül alanı giriniz
int modul=100;
//başlangıç konumu seçiniz daha sonra eğim analizine göre seçilecek
int x=floor(random(10, 40));
int y=floor(random(10, 40));

//hangi modülden kaç tane gerekli
int c0 = floor((p*8)/modul); //service=4
int c1 = floor((p*12)/modul); //research=6
int c2 = floor((p*10)/modul); //social=5
int c3 = floor((p*10)/modul); //sleeping=5

//modül sayaçları
int counterServ=c0; //service
int counterRes=c1; //research
int counterSoc=c2; //social 
int counterSle=c3; //sleeping

void setup() {
  size (1000, 1000);


  // Initialize rows, columns and set-up arrays
  columns = width/w;
  rows = height/w;

  //yükselti verisi
  elevation = new int[columns][rows];
  for (int i =0; i < columns; i++) {
    for (int j =0; j < rows; j++) {
      elevation[i][j] =floor(random(10, 60));
    }
  }

  //başlangıç noktası seçimi çizim için
  board = new int[columns][rows];
  for (int i = 0; i < columns; i++) {
    for (int j = 0; j < rows; j++) {
      board[i][j] = 4;
      // 4 = boş cell
    }
  }
  //başlangıç noktasını boyamak için service birimi
}


void draw() {
  background(255);
  int[] firstModule = new int[4] ; 
  board[x][y]=0;    
  for (int s=1; s<20; s++ ) {

    //ilk modülün çevresindekiler ile elevation farkı
    if ( x-1>=0 && board[x-1][y]!=0) {
      firstModule[0] = abs (elevation[x][y] - elevation[x-1][y]);
    } else {
      firstModule[0]=500;
    }



    if (x+1<=columns-2 && board[x+1][y]!=0) {
      firstModule[1] = abs (elevation[x][y] - elevation[x+1][y]);
    } else {
      firstModule[1]=500;
    }


    if (y-1>=0 && board[x][y-1]!=0) {
      firstModule[2] = abs (elevation[x][y] - elevation[x][y-1]);
    } else {
      firstModule[2]=500;
    }


    if (y+1<=rows-2 && board[x][y+1]!=0) {
      firstModule[3] = abs (elevation[x][y] - elevation[x][y+1]);
    } else {
      firstModule[3]=500;
    }




    int[] Xler = new int[4] ; 
    Xler[0] = (x-1);
    Xler[1] = (x+1) ; 
    Xler[2] = (x); 
    Xler[3] = x;

    int[] Yler = new int[4] ; 
    Yler[0] = y;
    Yler[1] = y ; 
    Yler[2] = (y-1) ; 
    Yler[3] = (y+1) ;

    print ( "module0: " + firstModule[0]);
    print ( "  ," + firstModule[1]);
    print ( "  ," + firstModule[2]);
    print ( "  ," + firstModule[3]);

    noLoop();

    int best = 500;
    int bestX =0;
    int bestY= 0;
    for (int i=0; i <firstModule.length; i++) { 
      if (firstModule[i]<=best) {
        best= firstModule[i];
        bestX= Xler[i];
        bestY= Yler[i];
        x=bestX;
        y=bestY;
      }
    }

    //println ("bestelevation "+best);
    //println ("bestx "+bestX);
    //println ("besty "+bestY);
    //noLoop();
    //println (x);
    //print (" , "+y);
    board[x][y]=0;
  }

  int shoreX= 0;
  int shoreY=20;
  float distances [][]= new float[columns][rows];
  for ( int i = 0; i < columns; i++) {
    for ( int j = 0; j < rows; j++) {
    distances[i][j] = 0;
    }}
  int doluX[][]= new int[columns][rows];
  int doluY[][]= new int[columns][rows];
  for ( int i = 0; i < columns; i++) {
    for ( int j = 0; j < rows; j++) {
      // textSize(32);
      // text("1", (i+1)*w, (j+1)*w );

        if (board[i][j] != 4)
        {
          distances[i][j]= sqrt( pow((i*w+w/2)-shoreX, 2)+pow((j*w+w/2)-shoreY, 2));
          doluX[i][j]= i;
          doluY[i][j]= j;
        } 
        else if(board[i][j] == 4){
          distances[i][j]=0;
        }
          println(distances[i][j]);

      }
    }
    
        int b= distances.length;
        int c= distances[0].length;
        float[] oneDim = new float[b*c];
        for (int p = 0; p < b; p++) {
          for (int r = 0; r < c; r++) {
            oneDim[p*c + r] = distances[p][r];

          }
        }
        //println(oneDim);


        int d= doluX.length;
        int e= doluX[0].length;
        float[] oneDX = new float[d*e];
        for (int p = 0; p < b; p++) {
          for (int r = 0; r < c; r++) {
            oneDX[p*c + r] = doluX[p][r];
          }
        }
        //println(oneDX); 


        int f= doluY.length;
        int g= doluY[0].length;
        float[] oneDY = new float[f*g];
        for (int p = 0; p < b; p++) {
          for (int r = 0; r < c; r++) {
            oneDY[p*c + r] = doluY[p][r];
          }
        }
        //println(oneDY);







        float tempd=0;
        float tempx=0;
        float tempy=0;
        for (int n=0; n< rows * columns-1; n++) {
          if (oneDim[n]>oneDim[n+1]) {
            tempd = oneDim[n];
            oneDim[n] = oneDim[n+1];
            oneDim[n+1] = tempd;
            tempx = oneDX[n];
            oneDX[n] = oneDX[n+1];
            oneDX[n+1] = tempx;
            tempy = oneDY[n];
            oneDY[n] = oneDY[n+1];
            oneDY[n+1] = tempy;
          }
        }
        //println(oneDim);
        exit();

        for (int z=0; z<rows* columns; z++) {
          if (z<=rows*columns-20)
          {
            fill(255);
            stroke(0);
            rect((oneDX[z])*w, (oneDY[z])*w, w, w);
          } else if (z>=rows* columns-20 && z<=rows* columns-16) {
            fill(0, 255, 0);
            stroke(0);
            rect((oneDX[z])*w, (oneDY[z])*w, w, w);
          } else if (z>=rows* columns-16 && z<=rows* columns-11) {
            fill(0, 255, 120);
            stroke(0);
            rect((oneDX[z])*w, (oneDY[z])*w, w, w);
          } else if (z>=rows* columns-11 && z<=rows* columns-6) {
            fill(50, 255, 100);
            stroke(0);
            rect((oneDX[z])*w, (oneDY[z])*w, w, w);
          } else if (z>=rows* columns-6 && z<=rows* columns) {
            fill(90, 255, 1);
            stroke(0);
            rect((oneDX[z])*w, (oneDY[z])*w, w, w);
          }
        }
      
    }

