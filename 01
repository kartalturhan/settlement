

int w = 50;
int columns, rows;

//board
int[][] board;
int[][] elevation;

// populasyon sayısı giriniz
int p=50;
//modül alanı giriniz
int modul=100;
//başlangıç konumu seçiniz
int x=5;
int y=5;

//hangi modülden kaç tane gerekli
int c0 = floor((p*8)/modul); //service
int c1 = floor((p*12)/modul); //research
int c2 = floor((p*10)/modul); //social
int c3 = floor((p*10)/modul); //sleeping

//modül sayaçları
int counter=0; //service
int counter1=0; //research
int counter2=0; //social 
int counter3=0; //sleeping

void setup() {
  size (500, 500);

  // Initialize rows, columns and set-up arrays
  columns = width/w;
  rows = height/w;

//yükselti verisi
  elevation = new int[columns][rows];
  for (int i =0; i < columns; i++) {
    for (int j =0; j < rows; j++) {
      elevation[i][j] =floor(random(10, 15));
    }
  }

//başlangıç noktası seçimi
  board = new int[columns][rows];
  for (int i = 0; i < columns; i++) {
    for (int j = 0; j < rows; j++) {
      board[i][j] = 4;
      // 4 = boş cell 
    }
  }
  board[x][y]=0;
}

int a = abs (elevation[x][y] - elevation[x-1][y]) ;
int b = abs (elevation[x][y] - elevation[x+1][y]) ; 
int c = abs (elevation[x][y] - elevation[x][y-1]) ; 
int d = abs (elevation[x][y] - elevation[x][y+1]) ;

int[] array = { a, b,c,d};

//sıralasa 
//newarray = {d, a, b,c,};


void draw() {
  background(255);

println (abs (elevation[x][y] - elevation[x-1][y]));
println (abs (elevation[x][y] - elevation[x+1][y]));
println (abs (elevation[x][y] - elevation[x][y-1]));
println (abs (elevation[x][y] - elevation[x][y+1]));
println (array);
//elevation sayı ile gösterilecek
 /* for ( int i = 0; i < columns; i++) {
    for ( int j = 0; j < rows; j++) {
      if (elevation[i][j] == 10)
      {//yazı 10
        rect( i*w, j*w, w, w);
      } 
      if (elevation[i][j] == 11)
      {//yazı 11
        rect( i*w, j*w, w, w);
      }
      if (elevation[i][j] == 12)
      {//yazı 12
        rect( i*w, j*w, w, w);
      }
      if (elevation[i][j] == 13)
      {//yazı 13
        rect( i*w, j*w, w, w);
      }
      if (elevation[i][j] == 14)
      {//yazı 14
        rect( i*w, j*w, w, w);
      } else 
      rect( i*w, j*w, w, w);
      {
        //yazı 15
      }
    }
  }*/
  
  for ( int i = 0; i < columns; i++) {
    for ( int j = 0; j < rows; j++) {
      if (board[i][j] == 0)
      { // boş 
        fill (0,255,0); 
        stroke (0);
        rect( i*w, j*w, w, w);
      } else 
      rect( i*w, j*w, w, w);
      {
        fill (255); 
        stroke (0);
      }
    }
  }
}
