
//divide  column and rows
int w = 50; //column row size
int columns, rows;

//board to paint
int[][] board;
int[][] elevation;

// populasyon sayısı giriniz
int p=50;
//modül alanı giriniz
int modul=100;
//başlangıç konumu seçiniz daha sonra eğim analizine göre seçilecek
int x=5;
int y=5;

//hangi modülden kaç tane gerekli
int c0 = floor((p*8)/modul); //service=4
int c1 = floor((p*12)/modul); //research=6
int c2 = floor((p*10)/modul); //social=5
int c3 = floor((p*10)/modul); //sleeping=5

//modül sayaçları
int counterServ=c0; //service
int counterRes=c1; //research
int counterSoc=c2; //social 
int counterSle=c3; //sleeping

void setup() {
  size (500, 500);

  // Initialize rows, columns and set-up arrays
  columns = width/w;
  rows = height/w;

  //yükselti verisi
  elevation = new int[columns][rows];
  for (int i =0; i < columns; i++) {
    for (int j =0; j < rows; j++) {
      elevation[i][j] =floor(random(10, 15));
    }
  }

  //başlangıç noktası seçimi çizim için
  board = new int[columns][rows];
  for (int i = 0; i < columns; i++) {
    for (int j = 0; j < rows; j++) {
      board[i][j] = 4;
      // 4 = boş cell
    }
  }
  //başlangıç noktasını boyamak için service birimi
}


void draw() {
  background(255);
      int[] firstModule = new int[4] ; 
  board[x][y]=0;    
  for (int s=1; s<20; s++ ) {
 
    //ilk modülün çevresindekiler ile elevation farkı
    if (board[x-1][y]!=0) {
      firstModule[0] = abs (elevation[x][y] - elevation[x-1][y]);
    } 
    else {
      firstModule[0]=500;
    }
    if 
    (board[x+1][y]!=0) {
      firstModule[1] = abs (elevation[x][y] - elevation[x+1][y]);
    } 
    else {
      firstModule[1]=500;
    }
    if (board[x][y-1]!=0) {
      firstModule[2] = abs (elevation[x][y] - elevation[x][y-1]);
    } else {
      firstModule[2]=500;
    }
    if (board[x][y+1]!=0) {
      firstModule[3] = abs (elevation[x][y] - elevation[x][y+1]);
    } 
    else {
      firstModule[3]=500;
    }

    int[] Xler = new int[4] ; 
    Xler[0] = (x-1);
    Xler[1] = (x+1) ; 
    Xler[2] = (x); 
    Xler[3] = x;

    int[] Yler = new int[4] ; 
    Yler[0] = y;
    Yler[1] = y ; 
    Yler[2] = (y-1) ; 
    Yler[3] = (y+1) ;

    print ( "module0: " + firstModule[0]);
    print ( "  ," + firstModule[1]);
    print ( "  ," + firstModule[2]);
    print ( "  ," + firstModule[3]);

    noLoop();

    int best = 500;
    int bestX =0;
    int bestY= 0;
    for (int i=0; i <firstModule.length; i++) { 
      if (firstModule[i]<=best) {
        best= firstModule[i];
        bestX= Xler[i];
        bestY= Yler[i];
        x=bestX;
        y=bestY;
      }
    }

    println ("bestelevation "+best);
    println ("vestx "+bestX);
    println ("besty "+bestY);
    noLoop();
    println (x);
    print (" , "+y);
    if (s<=4){
    board[x][y]=0;
    }
    else if (s<=10){
    board[x][y]=50;
    }
    else if (s<=15){
    board[x][y]=100;
    }
    else if (s<=20){
    board[x][y]=150;
    }
  }
  


























  for ( int i = 0; i < columns; i++) {
    for ( int j = 0; j < rows; j++) {
      if (board[i][j] != 4)
      { // boş 
        fill (0, 255, board[i][j]); 
        stroke (0);
        rect( i*w, j*w, w, w);
      } 
      
      else 
      rect( i*w, j*w, w, w);
      {
        fill (255); 
        stroke (0);
      }
    }
  }
}
